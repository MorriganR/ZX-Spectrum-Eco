
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ZXNEXT_C5G(

	//////////// CLOCK //////////
	input 		          		CLOCK_125_p,
	input 		          		CLOCK_50_B5B,
	input 		          		CLOCK_50_B6A,
	input 		          		CLOCK_50_B7A,
	input 		          		CLOCK_50_B8A,

	//////////// LED //////////
	output		     [7:0]		LEDG,
	output		     [9:0]		LEDR,

	//////////// KEY //////////
	input 		          		CPU_RESET_n,
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,

	//////////// SDCARD //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DAT,

	//////////// Uart to USB //////////
	input 		          		UART_RX,
	output		          		UART_TX,

	//////////// SRAM //////////
	output		    [17:0]		SRAM_A,
	output		          		SRAM_CE_n,
	inout 		    [15:0]		SRAM_D,
	output		          		SRAM_LB_n,
	output		          		SRAM_UB_n,
	output		          		SRAM_OE_n,
	output		          		SRAM_WE_n,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);
// TEST
  reg [32:0] counter;
  always @ (posedge CLOCK_50_B5B) begin
    counter <= counter + 1;
  end
  assign LEDG[7:0] = ~counter[29:22];

// VGA
  wire [2:0] rgb_r_o;
  wire [2:0] rgb_g_o;
  wire [2:0] rgb_b_o;
  wire [1:0] vga_r;
  wire [1:0] vga_g;
  wire [1:0] vga_b;
  wire hsync_o;
  wire vsync_o;
  assign GPIO[0] = vga_r[0];
  assign GPIO[1] = vga_r[1];
  assign GPIO[2] = vga_g[0];
  assign GPIO[3] = vga_g[1];
  assign GPIO[4] = vga_b[0];
  assign GPIO[5] = vga_b[1];
  assign GPIO[6] = hsync_o;
  assign GPIO[7] = vsync_o;
  assign vga_r[1:0] = SW[9] ? rgb_r_o[2:1] : rgb_r_o[1:0];
  assign vga_g[1:0] = SW[9] ? rgb_g_o[2:1] : rgb_g_o[1:0];
  assign vga_b[1:0] = SW[9] ? rgb_b_o[2:1] : rgb_b_o[1:0];

// SRAM
  //wire [18:0] ram_addr_o;
  //wire [7:0] ram_data_io_zxdos;
  wire ram1_we_n_o;
  //wire [18:0] ram2_addr_o;
  //wire [7:0] ram2_data_io_zxdos;
  wire ram2_we_n_o;
  assign SRAM_WE_n = (ram1_we_n_o && ram2_we_n_o);
  assign SRAM_LB_n = (ram1_we_n_o && ram2_we_n_o) ? 1'b0 : ram1_we_n_o;
  assign SRAM_UB_n = (ram1_we_n_o && ram2_we_n_o) ? 1'b0 : ram2_we_n_o;
  assign SRAM_CE_n = 1'b0;
  assign SRAM_OE_n = 1'b0;
  



ZXNEXT_Cyclone_V ZXNEXT_Cyclone_V(
//-- Clocks
  .clock_50_i  (CLOCK_50_B5B), //        : in    std_logic;
//-- SRAM (AS7C34096)
  .ram_addr_o  (SRAM_A[17:0]), //        : out   std_logic_vector(18 downto 0)  := (others => '0');
  .ram_data_io_zxdos  (SRAM_D[7:0]), // : inout std_logic_vector(7 downto 0)  := (others => 'Z');
  .ram1_we_n_o  (ram1_we_n_o), //        : out   std_logic                      := '1';
//-- SRAM2
  //.ram2_addr_o  (ram2_addr_o), //        : out   std_logic_vector(18 downto 0)  := (others => '0');
  .ram2_data_io_zxdos  (SRAM_D[15:8]), // : inout std_logic_vector(7 downto 0)  := (others => 'Z');
  .ram2_we_n_o  (ram2_we_n_o), //        : out   std_logic                      := '1';            
//-- PS2
  .ps2_clk_io  (GPIO[35]), //        : inout std_logic                      := 'Z';
  .ps2_data_io  (GPIO[34]), //       : inout std_logic                      := 'Z';
  .ps2_pin6_io  (GPIO[33]), //       : inout std_logic                      := 'Z';  -- Mouse clock
  .ps2_pin2_io  (GPIO[32]), //       : inout std_logic                      := 'Z';  -- Mouse data
//-- SD Card
  .sd_cs0_n_o  (SD_DAT[3]), //        : out   std_logic                      := '1';
    //--      sd_cs1_n_o        : out   std_logic                      := '1';
  .sd_sclk_o  (SD_CLK), //         : out   std_logic                      := '0';
  .sd_mosi_o  (SD_CMD), //         : out   std_logic                      := '0';
  .sd_miso_i  (SD_DAT[0]), //         : in    std_logic;
//-- Joystick zxdos
  .joy_clk  (GPIO[31]), //           : out   std_logic;
  .joy_load  (GPIO[30]), //          : out   std_logic;
  .joy_data  (GPIO[29]), //          : in    std_logic;
//-- Audio
  .audioext_l_o  (GPIO[28]), //      : out   std_logic                      := '0';
  .audioext_r_o  (GPIO[27]), //      : out   std_logic                      := '0';
    //--      audioint_o        : out   std_logic                      := '0';
//-- K7
  .ear_port_i  (KEY[2]), //        : in    std_logic;
    //--      mic_port_o        : out   std_logic                      := '0';
//-- Buttons
  .btn_divmmc_n_i  (KEY[0]), //    : in    std_logic;
  .btn_multiface_n_i  (KEY[1]), // : in    std_logic;
    //--      btn_reset_n_i     : in    std_logic;
//-- VGA
  .rgb_r_o  (rgb_r_o), //           : out   std_logic_vector( 2 downto 0)  := (others => '0');
  .rgb_g_o  (rgb_g_o), //           : out   std_logic_vector( 2 downto 0)  := (others => '0');
  .rgb_b_o  (rgb_b_o), //           : out   std_logic_vector( 2 downto 0)  := (others => '0');
  .hsync_o  (hsync_o), //           : out   std_logic                      := '1';
  .vsync_o  (vsync_o) //           : out   std_logic                      := '1';
    //csync_o           : out   std_logic                      := 'Z'
);

endmodule
